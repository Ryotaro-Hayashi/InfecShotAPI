// Code generated by MockGen. DO NOT EDIT.
// Source: response.go

// Package mock_response is a generated GoMock package.
package mock_response

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpResponse is a mock of HttpResponse interface.
type MockHttpResponse struct {
	ctrl     *gomock.Controller
	recorder *MockHttpResponseMockRecorder
}

// MockHttpResponseMockRecorder is the mock recorder for MockHttpResponse.
type MockHttpResponseMockRecorder struct {
	mock *MockHttpResponse
}

// NewMockHttpResponse creates a new mock instance.
func NewMockHttpResponse(ctrl *gomock.Controller) *MockHttpResponse {
	mock := &MockHttpResponse{ctrl: ctrl}
	mock.recorder = &MockHttpResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpResponse) EXPECT() *MockHttpResponseMockRecorder {
	return m.recorder
}

// Failed mocks base method.
func (m *MockHttpResponse) Failed(writer http.ResponseWriter, request *http.Request, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Failed", writer, request, err)
}

// Failed indicates an expected call of Failed.
func (mr *MockHttpResponseMockRecorder) Failed(writer, request, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockHttpResponse)(nil).Failed), writer, request, err)
}

// Success mocks base method.
func (m *MockHttpResponse) Success(writer http.ResponseWriter, request *http.Request, response interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Success", writer, request, response)
}

// Success indicates an expected call of Success.
func (mr *MockHttpResponseMockRecorder) Success(writer, request, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Success", reflect.TypeOf((*MockHttpResponse)(nil).Success), writer, request, response)
}
