// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	model "InfecShotAPI/pkg/server/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// InsertUser mocks base method.
func (m *MockUserRepository) InsertUser(record *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryMockRecorder) InsertUser(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), record)
}

// SelectUserByAuthToken mocks base method.
func (m *MockUserRepository) SelectUserByAuthToken(authToken string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByAuthToken", authToken)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByAuthToken indicates an expected call of SelectUserByAuthToken.
func (mr *MockUserRepositoryMockRecorder) SelectUserByAuthToken(authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByAuthToken", reflect.TypeOf((*MockUserRepository)(nil).SelectUserByAuthToken), authToken)
}

// SelectUserByPrimaryKey mocks base method.
func (m *MockUserRepository) SelectUserByPrimaryKey(userID string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserByPrimaryKey", userID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserByPrimaryKey indicates an expected call of SelectUserByPrimaryKey.
func (mr *MockUserRepositoryMockRecorder) SelectUserByPrimaryKey(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserByPrimaryKey", reflect.TypeOf((*MockUserRepository)(nil).SelectUserByPrimaryKey), userID)
}

// SelectUsersOrderByHighScoreAsc mocks base method.
func (m *MockUserRepository) SelectUsersOrderByHighScoreAsc(limit, offset int) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUsersOrderByHighScoreAsc", limit, offset)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUsersOrderByHighScoreAsc indicates an expected call of SelectUsersOrderByHighScoreAsc.
func (mr *MockUserRepositoryMockRecorder) SelectUsersOrderByHighScoreAsc(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUsersOrderByHighScoreAsc", reflect.TypeOf((*MockUserRepository)(nil).SelectUsersOrderByHighScoreAsc), limit, offset)
}

// UpdateUserByPrimaryKey mocks base method.
func (m *MockUserRepository) UpdateUserByPrimaryKey(record *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByPrimaryKey", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserByPrimaryKey indicates an expected call of UpdateUserByPrimaryKey.
func (mr *MockUserRepositoryMockRecorder) UpdateUserByPrimaryKey(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByPrimaryKey", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserByPrimaryKey), record)
}
